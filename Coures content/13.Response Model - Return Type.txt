Response Model - Return Type
1.ให้พวกเราสังเกตุใน swagger ตอนนี้ในกล่อง successful response จะเขียนแค่ string
2.ตอนนี้เราการันตีไม่ได้ว่า values ที่ออกมาจะเป็น Type หรือ Model ที่เราต้องการทุกครั้งหรือไม่
3.วิธีการก็ง่ายๆ แค่ ใส่ return Type เป็น pydantic Model
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list[str] = []


@app.post("/items/")
async def create_item(item: Item) -> Item:
    return item


@app.get("/items/")
async def read_items() -> list[Item]:
    return [
        Item(name="Portal Gun", price=42.0),
        Item(name="Plumbus", price=32.0),
    ]

4.จะเห็นว่าในกรอบ successfull response body มีข้อมูลที่ตรงกับ pydantic model แสดงแล้ว
5.แต่ที่ peak ที่สุดของการระบุ return type คือ จะมีการ limit และ filter ข้อมูลตามที่ระบุไว้ใน Field ของ return type เช่นลองเพิ่ม
name: Annotated[str, Field(max_length=5)] 

6.มีอีกวิธีนึงในที่จะระบุ return type ได้ โดยใช้ function request ต่างๆของ fastapi ไม่ว่าจะเป็น get post put delete เราสามารถระบุ parameter ที่ชื่อ response_model เพื่อระบุ return type ได้ โดยประโยชน์ของสิ่งนี้คือเราไม่จำเป็นต้อง return เป็น type นั้นจริงๆ แต่อาจจะเป็น database model หรือ dictionary ซึ่ง fastapi จะทำการ convert ให้เอง
6.1 เปลี่ยน return type เป็น Any Import from typing
6.2 ระบุ response_model = Item
6.3 ใน get ข้อมูลใน list เปลี่ยนเป็น dict

7. ถ้าเรามีทั้ง response_model และ return Type ตัว fastapi จะดู response_model ก่อน
8. ยกตัวอย่างการใช้ response_model ในบางกรณีข้อมูลใน Model ของเราอาจจะมี 4 field แต่เราต้องการให้ return ออกไปแค่ 3 Field เช่น

from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

app = FastAPI()


class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None


# Don't do this in production!
@app.post("/user/")
async def create_user(user: UserIn) -> UserIn:
    return user


#To use EmailStr, first install email_validator.

E.g. pip install email-validator or pip install pydantic[email].

9.จากนั้นเราจะเพิ่ม UserOut Model โดยจะเหมือน UserIn ทุกอย่างแต่ไม่มี field password
class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

10. ระบุ response_model เป็น UserOut และเปลี่ยน return type ใน function เป็น Any
11. ซึ่งจริงๆวิธีนี้ก็มีปัญหาอยู่ เพราะเราจะไม่ได้ data Annotated หรือ validation ต่างๆ ถ้าเราระบุ return type ตรงๆ ตอนนี้ถ้าเราลองเปลี่ยน return type เป็น UserOut ก็จะเห็นว่า editor จะเริ่มบ่นแล้ว

12.ซึ่งจะนำไปสู้ solution ถัดไป เราจะเปลี่ยน UserOut  เป็น BaseUser แล้วเพิ่ม UserIn โดย Inherit BaseUser
class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None


class UserIn(BaseUser):
    password: str
13.เราจะลบ response_model ทิ้งแล้วระบุ return type เป็น BaseUser
@app.post("/user/")
async def create_user(user: UserIn) -> BaseUser:
    return user

14. สาเหตุที่ editor ไม่บ่นทั้งๆที่ type ที่ return ไป ไม่ใช่ BaseUser เป็นเพราะ UserIn เป็น Subclass ของ BaseUser


#Return a Response Directly
1.ในบางครั้งเราอาจต้องการ return response ออกไปโดยที่ไม่ต้องผ่าน pydantic model แต่เราก็ยังอยากให้ editor ไม่บ่นว่าสิ่งที่เรากำลังจะส่งออกไปไม่ตรงกับ return type เช่น 
from fastapi import FastAPI, Response
from fastapi.responses import JSONResponse, RedirectResponse

app = FastAPI()


@app.get("/portal")
async def get_portal(teleport: bool = False) -> Response:
    if teleport:
        return RedirectResponse(url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")
    return JSONResponse(content={"message": "Here's your interdimensional portal."})

