#Body - Nested Models
1. ใน Body ใส่ type เป็น List ก็ได้ เช่น
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list = []

2.ที่ชี้ประเด็นนี้ขึ้นมาเพราะว่าใน attribute type list นี้ สามารถเพิ่มให้ validate ได้ว่าจะต้องระบุมาเป็น int/str เท่านั้น เช่น
tags: list[str] = []

3.บางครั้งเราอาจต้องการให้ list ของข้อมูลนี้ไม่ซ้ำกันแทนที่เราจะ validate ใน code เราสามารถใช้ type set จัดการเรื่องนี้ได้ python จะจัดการ validate ให้เราเอง
เช่น 
tags: set[str] = set()

4.ตัวอย่างเช่น เราอาจจะอย่างลบข้อมูล Item เป็น lot แล้วต้องการส่งข้อมูลมาเป็น array ของ item_id ใน python เรามี type อยู่ประเภทนึงที่เหมาะสมกับเรื่องนี้ คืออะไร?

5.นอกจากเราจะสามารถระบุ type ของ attribute เป็น list(subtype) ได้แล้ว ยังระบุ type เป็น class ที่ถูกสร้างจาก BaseModel ของ pydantic ได้ด้วยเช่น
5.1 เพิ่ม class 
class Image(BaseModel):
    url: str
    name: str
5.2 นำ class Image ไปใช้ใน class Item
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    image: Image | None = None
5.3 ลองทดสอบดู
5.4 ลองเปลี่ยน image เป็น 
images: list[Image] | None = None
5.5 ก็จะได้ images key ที่มี value เป็น list ของ Image object

